{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNv34AC9efPrbpFIyo6W/kF",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Balasiva21/Balasiva-/blob/main/Unsupervised%20\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "{\n",
        "  \"nbformat\": 4,\n",
        "  \"nbformat_minor\": 0,\n",
        "  \"metadata\": {\n",
        "    \"colab\": {\n",
        "      \"provenance\": [],\n",
        "      \"authorship_tag\": \"ABX9TyMId5ONiVD6tU3zI/IXMxp5\",\n",
        "      \"include_colab_link\": true\n",
        "    },\n",
        "    \"kernelspec\": {\n",
        "      \"name\": \"python3\",\n",
        "      \"display_name\": \"Python 3\"\n",
        "    },\n",
        "    \"language_info\": {\n",
        "      \"name\": \"python\"\n",
        "    }\n",
        "  },\n",
        "  \"cells\": [\n",
        "    {\n",
        "      \"cell_type\": \"markdown\",\n",
        "      \"metadata\": {\n",
        "        \"id\": \"view-in-github\",\n",
        "        \"colab_type\": \"text\"\n",
        "      },\n",
        "      \"source\": [\n",
        "        \"<a href=\\\"https://colab.research.google.com/github/Kalyanianikkath/NM-Genrative-AI/blob/main/unsupervised_exam_score_classification.ipynb\\\" target=\\\"_parent\\\"><img src=\\\"https://colab.research.google.com/assets/colab-badge.svg\\\" alt=\\\"Open In Colab\\\"/></a>\"\n",
        "      ]\n",
        "    },\n",
        "    {\n",
        "      \"cell_type\": \"code\",\n",
        "      \"source\": [\n",
        "        \"# KMeans Clustering with Score Input and High/Low Output\\n\",\n",
        "        \"\\n\",\n",
        "        \"import numpy as np\\n\",\n",
        "        \"import matplotlib.pyplot as plt\\n\",\n",
        "        \"from sklearn.cluster import KMeans\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Step 1: Training Data (Unlabeled)\\n\",\n",
        "        \"scores = np.array([[35], [40], [42], [90], [95], [98]])\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Step 2: Train KMeans\\n\",\n",
        "        \"kmeans = KMeans(n_clusters=2, random_state=0)\\n\",\n",
        "        \"kmeans.fit(scores)\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Step 3: Predict cluster for a new score\\n\",\n",
        "        \"new_score = float(input(\\\"Enter a score to predict (e.g., 85): \\\"))\\n\",\n",
        "        \"prediction = kmeans.predict([[new_score]])[0]\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Step 4: Label the clusters manually\\n\",\n",
        "        \"# Find which cluster center is higher\\n\",\n",
        "        \"centers = kmeans.cluster_centers_.flatten()\\n\",\n",
        "        \"high_cluster = np.argmax(centers)\\n\",\n",
        "        \"low_cluster = 1 - high_cluster\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Step 5: Output the result\\n\",\n",
        "        \"if prediction == high_cluster:\\n\",\n",
        "        \"    print(f\\\"Score {new_score} is classified as: HIGH\\\")\\n\",\n",
        "        \"else:\\n\",\n",
        "        \"    print(f\\\"Score {new_score} is classified as: LOW\\\")\\n\",\n",
        "        \"\\n\",\n",
        "        \"# Optional: Plot existing clusters + the new point\\n\",\n",
        "        \"labels = kmeans.labels_\\n\",\n",
        "        \"plt.scatter(scores, [0]*len(scores), c=labels, cmap='coolwarm', s=100, label='Training Scores')\\n\",\n",
        "        \"plt.scatter([[new_score]], [0], color='green', s=200, marker='x', label='Input Score')\\n\",\n",
        "        \"plt.xlabel(\\\"Exam Score\\\")\\n\",\n",
        "        \"plt.yticks([])\\n\",\n",
        "        \"plt.title(\\\"Clustering Exam Scores with Prediction\\\")\\n\",\n",
        "        \"plt.legend()\\n\",\n",
        "        \"plt.grid(True)\\n\",\n",
        "        \"plt.show()\\n\"\n",
        "      ],\n",
        "      \"metadata\": {\n",
        "        \"colab\": {\n",
        "          \"base_uri\": \"https://localhost:8080/\",\n",
        "          \"height\": 508\n",
        "        },\n",
        "        \"id\": \"eKpie1kv1fj2\",\n",
        "        \"outputId\": \"9321c4d7-a8e1-4985-c92b-419c935af2b5\"\n",
        "      },\n",
        "      \"execution_count\": 3,\n",
        "      \"outputs\": [\n",
        "        {\n",
        "          \"output_type\": \"stream\",\n",
        "          \"name\": \"stdout\",\n",
        "          \"text\": [\n",
        "            \"Enter a score to predict (e.g., 85): 50\\n\",\n",
        "            \"Score 50.0 is classified as: LOW\\n\"\n",
        "          ]\n",
        "        },\n",
        "        {\n",
        "          \"output_type\": \"display_data\",\n",
        "          \"data\": {\n",
        "            \"text/plain\": [\n",
        "              \"<Figure size 640x480 with 1 Axes>\"\n",
        "            ],\n",
        "            \"image/png\": \""
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 179
        },
        "id": "J-1LDygDbg0F",
        "outputId": "b8b4ca6d-bb4f-4132-c2c3-3bec79883d5d"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "unterminated string literal (detected at line 96) (<ipython-input-4-440845373caf>, line 96)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-4-440845373caf>\"\u001b[0;36m, line \u001b[0;32m96\u001b[0m\n\u001b[0;31m    \"image/png\": \"iVBORw0KGgoAAAANSUhEUgAAAggAAAHHCAYAAADaqqCfAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAATfNJREFUeJzt3XlYFVXjB/Dv3Mu+IzuGIOACKCaihBuW+5a4Z6a4tlmppWmvuWVm2mpW/kxzyTTNTNPUXFByCfd9SUVBcUVEdhG49/z+4GVer4dV2Yrv53nu83BnzsycOQzM9545M1cRQggQERERPURT2RUgIiKiqocBgYiIiCQMCERERCRhQCAiIiIJAwIRERFJGBCIiIhIwoBAREREEgYEIiIikjAgEBERkYQB4R/Gy8sLQ4YMqexqPJalS5dCURTExcVVdlWompg2bRoURSlV2cTExHKuVfmIi4uDoihYunSpOq00+18SUVFRUBQFUVFRZbZOqroYEKqIS5cu4ZVXXoG3tzfMzMxgY2ODFi1aYO7cubh//36F1CEzMxPTpk37V/7x5/+jLOx169atyq5iqW3cuBFhYWFwdnaGhYUFvL290a9fP/zxxx+VXbUq7aOPPsL69evLfL1DhgwxOKZsbGzQqFEjfPbZZ3jw4EGZb688ffvttwZBg6ono8quAAGbNm1C3759YWpqisGDB6NBgwbIzs7G3r17MX78eJw5cwbfffddudcjMzMT06dPBwC0adOmzNc/aNAgvPDCCzA1NS3zdZfU/PnzYWVlJU23s7Or+Mo8gU8//RTjx49HWFgY3nvvPVhYWCAmJgY7duzAqlWr0KlTp8quYpXw/vvvY+LEiQbTPvroI/Tp0wfh4eFlvj1TU1MsWrQIAJCcnIy1a9di3LhxOHToEFatWlXm2ytOQftfEt9++y0cHR2l3srWrVvj/v37MDExKaMaUlXGgFDJYmNj8cILL8DT0xM7d+6Em5ubOm/UqFGIiYnBpk2bKrGGTy4jIwOWlpbQarXQarWVWpc+ffrA0dGxUuvwpHJzczFjxgy0b98e27Ztk+YnJCRUWF30ej2ys7NhZmZWYdssDSMjIxgZVdy/OSMjI7z00kvq+9dffx0hISFYvXo1Pv/8c7i7u0vLCCGQlZUFc3PzcqlPWe6/RqOpsr9rKnu8xFDJ5syZg/T0dHz//fcG4SCfr68vRo8eXejyhV1jLOh6/+HDh9GxY0c4OjrC3NwctWvXxrBhwwDkXb90cnICAEyfPl3tJp02bZq6/N9//40+ffqgRo0aMDMzQ3BwMDZs2FDgdv/880+8/vrrcHZ2xlNPPVVonby8vNCtWzfs3bsXzZo1g5mZGby9vfHDDz9I+3Ty5EmEhYXB3NwcTz31FD788EMsWbKkTMc1REREwMzMDOfOnTOY3rFjR9jb2+PGjRsAgKSkJIwbNw4NGzaElZUVbGxs0LlzZ5w4ccJg...\n\u001b[0m                 ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m unterminated string literal (detected at line 96)\n"
          ]
        }
      ]
    }
  ]
}